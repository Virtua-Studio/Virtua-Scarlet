// ----------------------------------
// RSDK Project: Virtua Scarlet
// Script Description: Menu Control Object
// Script Author: Klashicola/Geared
// ----------------------------------

// Aliases
private alias object.value0 : object.fade
private alias object.value1 : object.buttonYOffset
private alias object.value2 : object.dragCurrentSelection
private alias object.value3 : object.currentSelection
private alias object.value4 : object.buttonScroll
private alias object.value5 : object.dragEnabled
private alias object.value6 : object.dragYOffset
private alias object.value7 : object.dragSmooth
private alias object.direction : object.yoffsetCorrection

// object[1] is a blank object only used to share values across the menu objects
private alias object[1].value0 : object.dragPos
private alias object[1].value1 : object.recenterValue
private alias object[1].value2 : object.maxButtonCount
private alias object[1].value3 : object.dragLimit
private alias object[1].value4 : object.yoffset1 // In other scripts, this is used to check inputs
private alias object[1].value5 : object.yoffset2
private alias object[1].value6 : object.yoffset3

// Menu Button Aliases
private alias object[34].state : menuButton.state

// States
private alias 0 : MENUCONTROL_SETUP
private alias 1 : MENUCONTROL_BUTTONS_MOVEIN
private alias 2 : MENUCONTROL_CONTROLS
private alias 3 : MENUCONTROL_BLANK
private alias 4 : MENUCONTROL_ENTER_TIMEATTACK
private alias 5 : MENUCONTROL_ENTER_DEMO
private alias 6 : MENUCONTROL_MENUBUTTON_CHECK
private alias 7 : MENUCONTROL_ENTER_TROPHIES
private alias 8 : MENUCONTROL_ENTER_LEADERBOARDS
private alias 9 : MENUCONTROL_ENTER_LEVELSELECT
private alias 10 : MENUCONTROL_EXIT_GAME

// MenuButton States
private alias 2 : MENUBUTTON_CONFIRM_SELECTION

// Presentation Stages
private alias 2 : STAGE_P_TATTACK
private alias 9 : STAGE_P_THROPIES
private alias 10 : STAGE_P_LEADERBOARDS

// Regular Stages
private alias 0 : STAGE_R_THZ // Tutorial Highway

// Soundtrack
private alias 0 : OST_JP

// Engine & CallBacks
private alias 2 : MESSAGE_LOSTFOCUS

// Device Type
private alias 0 : RETRO_STANDARD


// ========================
// Events
// ========================

event ObjectUpdate
	switch object.state
	case MENUCONTROL_SETUP
		object.state = MENUCONTROL_BUTTONS_MOVEIN
		object.fade = 384
		SetScreenFade(0, 0, 0, 255)
		break

	case MENUCONTROL_BUTTONS_MOVEIN
		if object.fade > 0
			object.fade -= 8
		else
			object.state = MENUCONTROL_MENUBUTTON_CHECK
		end if
		SetScreenFade(0, 0, 0, object.fade)
		break

	case MENUCONTROL_CONTROLS
		CheckEqual(options.physicalControls, true)
		// There's a reason of why we're forcing options.physicalControls here first, so the other platforms can override it
		if checkResult == true
			if keyPress[0].up == true
				object.currentSelection--
				if object.currentSelection < 1
					object.currentSelection = 1
				else
					PlaySfx(SfxName[Menu Move], false)
				end if
			end if

			if keyPress[0].down == true
				object.currentSelection++
				if object.currentSelection > object.maxButtonCount
					object.currentSelection = object.maxButtonCount
				else
					PlaySfx(SfxName[Menu Move], false)
				end if
			end if

			temp0 = object.currentSelection
			temp0 -= object.buttonScroll
			if temp0 < 1
				object.buttonScroll--
				object.yoffsetCorrection = 5
			end if

			if temp0 > 6
				object.buttonScroll++
				object.yoffsetCorrection = 0
			end if

			// Button Movement across the screen 
			temp0 = object.buttonYOffset
			temp0 -= 32

			temp1 = object.buttonScroll
			temp1 *= -60
			temp1 -= temp0
			temp1 += object.yoffsetCorrection
			temp1 >>= 2
			object.buttonYOffset += temp1
			CheckTouchRect(0, 0, screen.xsize, screen.ysize)
			if checkResult > -1
				options.physicalControls = false
				object.currentSelection = 0
				object.dragCurrentSelection = 0
			end if
		else
			if object.dragCurrentSelection > 0
				object.currentSelection = object.dragCurrentSelection
			else
				object.currentSelection = 0
			end if

			if object.maxButtonCount > 6
				CheckTouchRect(0, 0, screen.xsize, screen.ysize)
				if checkResult > -1
					arrayPos0 = checkResult
					if object.dragEnabled == false
						object.dragEnabled = true
						object.dragPos = object.buttonYOffset
						object.dragYOffset = touchscreen[arrayPos0].ypos
					else
						// Dragging of buttons based on input
						temp0 = touchscreen[arrayPos0].ypos
						temp0 -= object.dragYOffset
						temp0 += object.dragPos

						object.yoffset3 = object.yoffset2
						object.yoffset2 = object.yoffset1
						object.yoffset1 = object.dragSmooth

						object.dragSmooth = temp0
						object.dragSmooth -= object.buttonYOffset
						object.buttonYOffset = temp0
					end if

					temp0 = object.dragSmooth
					temp0 >>= 3
					if temp0 != 0
						object.currentSelection = 0
						object.dragCurrentSelection = 0
					end if
				else
					if object.dragEnabled == true
						// Sets the position to where the buttons will go post-drag
						object.dragEnabled = false
						object.dragYOffset = object.buttonYOffset
						object.dragYOffset <<= 12

						object.dragSmooth += object.yoffset1
						object.dragSmooth += object.yoffset2
						object.dragSmooth += object.yoffset3
						object.dragSmooth >>= 2
						object.dragSmooth <<= 7

						if object.dragSmooth == 0
							if object.currentSelection == 0
								object.dragSmooth = 1 // Forces movement
							end if
						end if
					end if

					if object.dragSmooth != 0
						// Centers to whatever button is closer to the center + offset up or down depending of to where did you drag
						object.dragYOffset += object.dragSmooth
						if object.dragYOffset < object.dragLimit
							object.dragYOffset = object.dragLimit
							object.dragSmooth = 0
						end if

						if object.dragYOffset > 0x5A00
							object.dragYOffset = 0x5A00
							object.dragSmooth = 0
						end if

						if object.dragSmooth > 0
							object.dragSmooth -= 32
							if object.dragSmooth < 0
								object.dragSmooth = 0
							end if
						else
							object.dragSmooth += 32
							if object.dragSmooth > 0
								object.dragSmooth = 0
							end if
						end if

						object.buttonYOffset = object.dragYOffset
						object.buttonYOffset >>= 8
						if object.dragSmooth == 0
							object.buttonScroll = object.buttonYOffset
							object.buttonScroll -= 32
							object.buttonScroll /= -60
							if object.buttonScroll < 0
								object.buttonScroll = 0
							end if

							temp0 = object.maxButtonCount
							temp0 -= 6
							if object.buttonScroll > temp0
								object.buttonScroll = temp0
							end if
						end if
					else
						// Drag screen re-centering
						temp0 = object.buttonYOffset
						temp0 -= 32
						object.recenterValue = object.buttonScroll
						object.recenterValue *= -60
						object.recenterValue -= temp0
						object.recenterValue >>= 3
						if object.recenterValue < -6
							object.recenterValue = -6
						end if
						if object.recenterValue > 6
							Object.RecenterValue = 6
						end if
						object.buttonYOffset += object.recenterValue
					end if
				end if
			end if

			if keyPress[0].up == true
				object.currentSelection = object.maxButtonCount
				options.physicalControls = true
			end if

			if keyPress[0].down == true
				object.currentSelection = 1
				options.physicalControls = true
			end if
		end if
		break

	case MENUCONTROL_BLANK // Used to stop the controls temporarily
		break

	case MENUCONTROL_ENTER_TIMEATTACK
		if object.fade < 320
			object.fade += 8
		else
			stage.listPos = STAGE_P_TATTACK
			LoadStage()
		end if
		SetScreenFade(0, 0, 0, object.fade)
		break

	case MENUCONTROL_MENUBUTTON_CHECK
		if menuButton.state == MENUBUTTON_CONFIRM_SELECTION
			object.state = MENUCONTROL_CONTROLS
		end if
		break

	case MENUCONTROL_ENTER_TROPHIES // Mobile Only, leftover from CD, not sure of why is it still here...
		if object.fade < 320
			object.fade += 8
		else
			stage.listPos = STAGE_P_THROPIES
			LoadStage()
		end if

		SetScreenFade(0, 0, 0, object.fade)
		break
		
	case MENUCONTROL_ENTER_LEVELSELECT
		if object.fade < 320
			object.fade += 8
		else
			stage.listPos = STAGE_P_TATTACK // ...What? Why are we entering Time Attack again? Oh well, all toasters go toast!
			LoadStage()
		end if

		SetScreenFade(0, 0, 0, object.fade)
		break

	case MENUCONTROL_EXIT_GAME
		if object.fade <= 320
			object.fade += 8
		else
			CallNativeFunction(ExitGame)
		end if

		SetScreenFade(0, 0, 0, object.fade)
		break

	end switch
end event


event ObjectStartup
	options.touchControls = false
	SetMusicTrack("MainMenu.ogg", 0, 100512) // The music playing is handled here, for some reason?
	object[0].type = TypeName[Menu Control]
	object[0].buttonYOffset = 32
	options.physicalControls = false
	PlayMusic(0)
	object[0].dragCurrentSelection = 0
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143) // #0 - "Script" Icon
end event
